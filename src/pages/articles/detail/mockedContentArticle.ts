export const mockedContent = {"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"Se voc√™ j√° trabalhou em projetos que pareciam f√°ceis no come√ßo, mas com o tempo viraram um pesadelo de manuten√ß√£o, provavelmente sofreu com "},{"type":"text","marks":[{"type":"bold"}],"text":"c√≥digo r√≠gido, acoplado e dif√≠cil de escalar"},{"type":"text","text":"."}]},{"type":"paragraph","content":[{"type":"text","text":"Os princ√≠pios "},{"type":"text","marks":[{"type":"bold"}],"text":"SOLID"},{"type":"text","text":" surgiram exatamente para evitar esse problema. Eles ajudam a escrever um c√≥digo "},{"type":"text","marks":[{"type":"bold"}],"text":"mais organizado, flex√≠vel e f√°cil de manter"},{"type":"text","text":". Vamos ver, de forma objetiva e com exemplos pr√°ticos, como aplic√°-los no dia a dia!"}]},{"type":"horizontalRule"},{"type":"heading","attrs":{"level":2},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"üìå S - Single Responsibility Principle (SRP)"}]},{"type":"blockquote","content":[{"type":"paragraph","content":[{"type":"text","text":"\"Uma classe deve ter apenas uma raz√£o para mudar.\""}]}]},{"type":"paragraph","content":[{"type":"text","text":"Imagine uma classe que faz tudo: processa pedidos, gera nota fiscal e envia e-mails."}]},{"type":"codeBlock","attrs":{"language":null},"content":[{"type":"text","text":"public class PedidoService\n{\n    public void ProcessarPedido() { /* l√≥gica */ }\n    public void GerarNotaFiscal() { /* l√≥gica */ }\n    public void EnviarEmail() { /* l√≥gica */ }\n}\n"}]},{"type":"paragraph","content":[{"type":"text","text":"‚ùå O problema? Sempre que precisar mudar a nota fiscal, pode acabar impactando o envio de e-mails."}]},{"type":"paragraph","content":[{"type":"text","text":"‚úÖ "},{"type":"text","marks":[{"type":"bold"}],"text":"Solu√ß√£o"},{"type":"text","text":": Separar responsabilidades:"}]},{"type":"codeBlock","attrs":{"language":null},"content":[{"type":"text","text":"public class PedidoProcessor { /* Processa o pedido */ }\npublic class NotaFiscalService { /* Gera nota fiscal */ }\npublic class EmailService { /* Envia e-mails */ }\n"}]},{"type":"paragraph","content":[{"type":"text","text":"Agora, cada classe tem "},{"type":"text","marks":[{"type":"bold"}],"text":"apenas uma responsabilidade"},{"type":"text","text":", facilitando a manuten√ß√£o."}]},{"type":"horizontalRule"},{"type":"heading","attrs":{"level":2},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"üìå O - Open/Closed Principle (OCP)"}]},{"type":"blockquote","content":[{"type":"paragraph","content":[{"type":"text","text":"\"O c√≥digo deve estar aberto para extens√£o, mas fechado para modifica√ß√£o.\""}]}]},{"type":"paragraph","content":[{"type":"text","text":"Imagine um sistema que calcula descontos para diferentes clientes:"}]},{"type":"codeBlock","attrs":{"language":null},"content":[{"type":"text","text":"public class Pedido\n{\n    public decimal CalcularDesconto(string tipoCliente)\n    {\n        if (tipoCliente == \"Premium\") return 0.2m;\n        if (tipoCliente == \"Regular\") return 0.1m;\n        return 0m;\n    }\n}\n"}]},{"type":"paragraph","content":[{"type":"text","text":"‚ùå O problema? Se surgir um novo tipo de cliente, "},{"type":"text","marks":[{"type":"bold"}],"text":"precisamos modificar essa classe"},{"type":"text","text":", quebrando o OCP."}]},{"type":"paragraph","content":[{"type":"text","text":"‚úÖ "},{"type":"text","marks":[{"type":"bold"}],"text":"Solu√ß√£o"},{"type":"text","text":": Criar uma estrutura extens√≠vel:"}]},{"type":"codeBlock","attrs":{"language":null},"content":[{"type":"text","text":"public interface IDesconto { decimal Aplicar(); }\n\npublic class DescontoPremium : IDesconto { public decimal Aplicar() => 0.2m; }\npublic class DescontoRegular : IDesconto { public decimal Aplicar() => 0.1m; }\n\npublic class Pedido\n{\n    private readonly IDesconto _desconto;\n    public Pedido(IDesconto desconto) { _desconto = desconto; }\n    public decimal CalcularDesconto() => _desconto.Aplicar();\n}\n\n"}]},{"type":"paragraph","content":[{"type":"text","text":"Agora, podemos adicionar novos descontos sem mexer no c√≥digo existente."}]},{"type":"horizontalRule"},{"type":"heading","attrs":{"level":2},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"üìå L - Liskov Substitution Principle (LSP)"}]},{"type":"blockquote","content":[{"type":"paragraph","content":[{"type":"text","text":"\"Objetos de uma subclasse devem poder substituir objetos da superclasse sem quebrar o c√≥digo.\""}]}]},{"type":"paragraph","content":[{"type":"text","text":"Imagine que temos uma classe "},{"type":"text","marks":[{"type":"code"}],"text":"Ave"},{"type":"text","text":" que define um comportamento comum para todas as aves:"}]},{"type":"codeBlock","attrs":{"language":null},"content":[{"type":"text","text":"public class Ave\n{\n    public virtual void Voar()\n    {\n        Console.WriteLine(\"A ave est√° voando!\");\n    }\n}\n"}]},{"type":"paragraph","content":[{"type":"text","text":"Agora, queremos adicionar um "},{"type":"text","marks":[{"type":"bold"}],"text":"pinguim"},{"type":"text","text":" ao nosso c√≥digo, mas ele n√£o pode voar! Se criarmos uma subclasse "},{"type":"text","marks":[{"type":"code"}],"text":"Pinguim"},{"type":"text","text":" e sobrescrevermos "},{"type":"text","marks":[{"type":"code"}],"text":"Voar()"},{"type":"text","text":", teremos um problema:"}]},{"type":"codeBlock","attrs":{"language":null},"content":[{"type":"text","text":"public class Pinguim : Ave\n{\n    public override void Voar()\n    {\n        throw new NotImplementedException(\"Pinguins n√£o voam!\");\n    }\n}\n"}]},{"type":"paragraph","content":[{"type":"text","text":"‚ùå "},{"type":"text","marks":[{"type":"bold"}],"text":"O problema?"},{"type":"text","text":" Se um c√≥digo espera receber uma "},{"type":"text","marks":[{"type":"code"}],"text":"Ave"},{"type":"text","text":", mas recebe um "},{"type":"text","marks":[{"type":"code"}],"text":"Pinguim"},{"type":"text","text":", pode acabar chamando "},{"type":"text","marks":[{"type":"code"}],"text":"Voar()"},{"type":"text","text":" e quebrando a aplica√ß√£o."}]},{"type":"paragraph","content":[{"type":"text","text":"‚úÖ "},{"type":"text","marks":[{"type":"bold"}],"text":"Solu√ß√£o"},{"type":"text","text":": Precisamos "},{"type":"text","marks":[{"type":"bold"}],"text":"reorganizar a hierarquia"},{"type":"text","text":" e evitar for√ßar um comportamento que nem todas as subclasses podem ter."}]},{"type":"codeBlock","attrs":{"language":null},"content":[{"type":"text","text":"public abstract class Ave { }\n\npublic interface IVoavel\n{\n    void Voar();\n}\n\npublic class Andorinha : Ave, IVoavel\n{\n    public void Voar() => Console.WriteLine(\"A andorinha est√° voando!\");\n}\n\npublic class Pinguim : Ave\n{\n    public void Nadar() => Console.WriteLine(\"O pinguim est√° nadando!\");\n}\n"}]},{"type":"paragraph","content":[{"type":"text","text":"Agora, garantimos que "},{"type":"text","marks":[{"type":"bold"}],"text":"somente as aves que realmente voam implementem "},{"type":"text","marks":[{"type":"code"}],"text":"IVoavel"},{"type":"text","text":", e evitamos problemas de substitui√ß√£o."}]},{"type":"horizontalRule"},{"type":"heading","attrs":{"level":2},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"üìå I - Interface Segregation Principle (ISP)"}]},{"type":"blockquote","content":[{"type":"paragraph","content":[{"type":"text","text":"\"Uma interface n√£o deve for√ßar uma classe a implementar m√©todos que ela n√£o usa.\""}]}]},{"type":"paragraph","content":[{"type":"text","text":"Suponha que temos uma interface "},{"type":"text","marks":[{"type":"code"}],"text":"IAcaoFuncionario"},{"type":"text","text":" que obriga todas as classes a implementarem m√©todos desnecess√°rios:"}]},{"type":"codeBlock","attrs":{"language":null},"content":[{"type":"text","text":"public interface IAcaoFuncionario\n{\n    void Trabalhar();\n    void Gerenciar();\n}\n\npublic class Desenvolvedor : IAcaoFuncionario\n{\n    public void Trabalhar() { /* l√≥gica */ }\n    public void Gerenciar() { throw new NotImplementedException(); }\n\n"}]},{"type":"paragraph","content":[{"type":"text","text":"‚ùå O problema? Um "},{"type":"text","marks":[{"type":"bold"}],"text":"desenvolvedor n√£o gerencia"},{"type":"text","text":", mas √© obrigado a implementar o m√©todo."}]},{"type":"paragraph","content":[{"type":"text","text":"‚úÖ "},{"type":"text","marks":[{"type":"bold"}],"text":"Solu√ß√£o"},{"type":"text","text":": Criar interfaces menores e espec√≠ficas:"}]},{"type":"codeBlock","attrs":{"language":null},"content":[{"type":"text","text":"public interface ITrabalho { void Trabalhar(); }\npublic interface IGerencia { void Gerenciar(); }\n\npublic class Desenvolvedor : ITrabalho\n{\n    public void Trabalhar() { /* l√≥gica */ }\n}\n"}]},{"type":"paragraph","content":[{"type":"text","text":"Agora, cada classe "},{"type":"text","marks":[{"type":"bold"}],"text":"implementa apenas o que precisa"},{"type":"text","text":"."}]},{"type":"horizontalRule"},{"type":"heading","attrs":{"level":2},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"üìå D - Dependency Inversion Principle (DIP)"}]},{"type":"blockquote","content":[{"type":"paragraph","content":[{"type":"text","text":"\"M√≥dulos de alto n√≠vel n√£o devem depender de m√≥dulos de baixo n√≠vel, mas sim de abstra√ß√µes.\""}]}]},{"type":"paragraph","content":[{"type":"text","text":"Suponha que um servi√ßo de pedidos dependa diretamente de um servi√ßo de pagamento:"}]},{"type":"codeBlock","attrs":{"language":null},"content":[{"type":"text","text":"public class PedidoService\n{\n    private readonly PagamentoService _pagamentoService = new PagamentoService();\n\n    public void ProcessarPedido() { _pagamentoService.RealizarPagamento(); }\n}\n"}]},{"type":"paragraph","content":[{"type":"text","text":"‚ùå O problema? Se "},{"type":"text","marks":[{"type":"code"}],"text":"PagamentoService"},{"type":"text","text":" mudar, "},{"type":"text","marks":[{"type":"bold"}],"text":"PedidoService pode quebrar"},{"type":"text","text":"."}]},{"type":"paragraph","content":[{"type":"text","text":"‚úÖ "},{"type":"text","marks":[{"type":"bold"}],"text":"Solu√ß√£o"},{"type":"text","text":": Usar "},{"type":"text","marks":[{"type":"bold"}],"text":"inje√ß√£o de depend√™ncia"},{"type":"text","text":" e abstra√ß√µes:"}]},{"type":"codeBlock","attrs":{"language":null},"content":[{"type":"text","text":"public interface IPagamentoService { void RealizarPagamento(); }\n\npublic class PedidoService\n{\n    private readonly IPagamentoService _pagamentoService;\n\n    public PedidoService(IPagamentoService pagamentoService)\n    {\n        _pagamentoService = pagamentoService;\n    }\n\n    public void ProcessarPedido() { _pagamentoService.RealizarPagamento(); }\n}\n"}]},{"type":"paragraph","content":[{"type":"text","text":"Agora, podemos trocar a implementa√ß√£o de pagamento sem alterar "},{"type":"text","marks":[{"type":"code"}],"text":"PedidoService"},{"type":"text","text":"."}]},{"type":"horizontalRule"},{"type":"heading","attrs":{"level":2},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"üéØ Conclus√£o"}]},{"type":"paragraph","content":[{"type":"text","text":"Os princ√≠pios SOLID n√£o s√£o apenas teoria ‚Äî eles ajudam a criar "},{"type":"text","marks":[{"type":"bold"}],"text":"c√≥digo mais flex√≠vel e de f√°cil manuten√ß√£o"},{"type":"text","text":". Mas lembre-se: "},{"type":"text","marks":[{"type":"bold"}],"text":"nem tudo precisa ser superabstra√≠do"},{"type":"text","text":". O segredo √© aplicar SOLID com equil√≠brio, garantindo um c√≥digo limpo sem exageros."}]},{"type":"paragraph","content":[{"type":"text","text":"E voc√™, j√° enfrentou c√≥digo que ignorava SOLID? Comenta aqui sua experi√™ncia! üöÄ"}]}]}