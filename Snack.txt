import { renderHook, act } from '@testing-library/react-hooks';
import { useLoginPage } from './LoginPageHook';

import { loginService } from '../../services/authService';
import { TokenHandler } from '../../utils/TokenHandler';
import { jwtDecode } from 'jwt-decode';

const navigate = jest.fn();

jest.mock('react-router-dom', () => ({
  useNavigate: () => navigate,
}));

jest.mock('../../services/authService');
jest.mock('../../utils/TokenHandler');
jest.mock('jwt-decode', () => ({
  jwtDecode: jest.fn(),
}));

describe('useLoginPage', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should perform login and navigate to the correct role', async () => {
    loginService.mockResolvedValue({
      accessToken: 'fakeAccessToken',
      refreshToken: 'fakeRefreshToken',
    });

    TokenHandler.defineTokens = jest.fn();
    TokenHandler.accessToken = 'fakeAccessToken';

    jwtDecode.mockReturnValue({
      roles: ['ADMIN'],
    });

    const { result } = renderHook(() => useLoginPage());

    act(() => {
      result.current[0]({ target: { name: 'email', value: 'admin@test.com' } });
      result.current[0]({ target: { name: 'senha', value: 'password123' } });
    });

    await act(async () => {
      await result.current[2]({ preventDefault: jest.fn() });
    });

    expect(loginService).toHaveBeenCalledWith({
      email: 'admin@test.com',
      senha: 'password123',
    });

    expect(TokenHandler.defineTokens).toHaveBeenCalledWith(
      'fakeAccessToken',
      'fakeRefreshToken'
    );

    expect(jwtDecode).toHaveBeenCalledWith('fakeAccessToken');

    expect(navigate).toHaveBeenCalledWith('/admin');

    expect(localStorage.getItem('profile')).toBe('admin');
  });
});